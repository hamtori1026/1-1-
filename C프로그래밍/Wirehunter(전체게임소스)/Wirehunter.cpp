// Wirehunter.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//
// WireHunter01.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.

#include "stdafx.h"
#include <windows.h>
#include <conio.h>
#include <time.h>
#include <fmod.h>

#define ENEMY_COUNT 30
#define END_LINE	21
#define BULLET_COUNT 4

typedef enum _GAME_STATE { INIT, RUNNING, SUCCESS, FAILED, RESULT, END } GAME_STATE;

struct PLAY
{
	int		nIndex;
	int		nX, nY;
	int		nLifePower; 
};

struct ENEMY
{
	int		nLife;			// 생명
	int		nX, nY;			// 좌표	
	int		nYMoveDist;		// 이동 거리 
	int		nOldFrame;	
	int		nAppearFrame;   // 출현 프레임	
};

// 총알의 속도는 전부 같도록 한다.
struct BULLET
{
	int		nLife;
	int		nX, nY;
	int		nOldFrame;
};

PLAY	g_sPlay;

/* 1초에 30fps가 나오며 1 스테이지를 30초로 제안을 했다면 30 * 30 으로 총 30초동안에 900 fps가 일어난다.
이 900 fps는 적 캐릭터가 나오게 되는 전체 시간이 된다.*/

ENEMY	g_sEnemy[ENEMY_COUNT] = { { 0, 1, 0, 0, 0, 5 }, { 0, 1, 0, 0, 0, 5 }, { 0, 1, 0, 0, 0, 5 }, { 0, 1, 0, 0, 0, 5 }, 
{ 0, 1, 0, 0, 0, 30 }, { 0, 1, 0, 0, 0, 35 }, { 0, 1, 0, 0, 0, 50 }, { 0, 1, 0, 0, 0, 100 }, { 0, 1, 0, 0, 0, 150 },
{ 0, 1, 0, 0, 0, 150 }, { 0, 1, 0, 0, 0, 200 }, { 0, 1, 0, 0, 0, 300 }, { 0, 1, 0, 0, 0, 320 }, { 0, 1, 0, 0, 0, 350 }, 
{ 0, 1, 0, 0, 0, 400 }, { 0, 1, 0, 0, 0, 420 }, { 0, 1, 0, 0, 0, 470 }, { 0, 1, 0, 0, 0, 500 }, { 0, 1, 0, 0, 0, 530 },
{ 0, 1, 0, 0, 0, 560 }, { 0, 1, 0, 0, 0, 600 }, { 0, 1, 0, 0, 0, 620 }, { 0, 1, 0, 0, 0, 650 }, { 0, 1, 0, 0, 0, 680 }, 
{ 0, 1, 0, 0, 0, 700 }, { 0, 1, 0, 0, 0, 720 }, { 0, 1, 0, 0, 0, 750 }, { 0, 1, 0, 0, 0, 780 }, { 0, 1, 0, 0, 0, 800 },
{ 0, 1, 0, 0, 0, 850 }
};

BULLET g_sBullet[BULLET_COUNT] = { 0, };

unsigned int g_nFrameCount = 0;
int g_nXPos[4] = { 6, 12, 19, 26 };
unsigned int	g_nBulletVeloc = 4;

int g_nGrade = 0;		// 점수 
int g_nGoal = 0; 

struct STAGE_INFO
{
	int nGoal;  // 스테이지별 목표 적 캐릭터수 
	int nYDist; // 스테이지별 이동 속도
};

STAGE_INFO g_StageInfo[6] = { { 10, 10 }, { 15, 10 }, { 15, 8 }, { 18, 8 }, { 15, 6 }, { 17, 6 } };
GAME_STATE g_GameState = INIT;  // 0 초기 상태 1 본 게임 2 게임 종료 
int g_nEnemyIndex = 0;
int g_nDeadEnemy = 0;

FMOD_SYSTEM     *g_System;
FMOD_SOUND		*g_BGSound, *g_Sound, *g_FailSound, *g_IntroSound, *g_EffectSound[4];
FMOD_CHANNEL	*g_BGChannel, *g_IntroChannel, *g_FailChannel, *g_pTempChannel;

int g_nStage = 1;

void gotoxy( int x, int y )
{
	COORD CursorPosition = { x, y };
	SetConsoleCursorPosition( GetStdHandle( STD_OUTPUT_HANDLE ), CursorPosition );
}

void IntroScreen()
{
	gotoxy( 0, 0);
	printf( "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf( "┃     ┃                                         ┃          ┃\n");
	printf( "┃     ■                                         ┃          ┃\n");
	printf( "┃     ┃                                         ┃          ┃\n");
	printf( "┃     ┃             W i r e H u n t e r         ┃          ┃\n");
	printf( "┃     ┃                                         ┃          ┃\n");
	printf( "┃                                                ■          ┃\n");
	printf( "┃             이동키 : 좌(J), 우(L), 총알(K)     ┃          ┃\n");
	printf( "┃                                                ┃          ┃\n");
	printf( "┃                                                            ┃\n");
	printf( "┃  #######                                                   ┃\n");
	printf( "┃ #       ##                                                 ┃\n");
	printf( "┃#          ###         ##                                   ┃\n");
	printf( "┃              ###    ##  ######             ####            ┃\n");
	printf( "┃                 ####          ####     ####     #          ┃\n");
	printf( "┃                                   #####          #         ┃\n");
	printf( "┃                                                    #       ┃\n");
	printf( "┃                                                      #     ┃\n");
	printf( "┃                                                        ### ┃\n");
	printf( "┃                                                           #┃\n");
	printf( "┃                                                            ┃\n");
	printf( "┃                                                            ┃\n");
	printf( "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
}

void BackScreen()
{
	// 배경 화면 그리기 
	gotoxy( 0, 0 );
	printf( "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃              점수 :              ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃              적 캐릭터수 :       ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃              생명력 :            ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃              스테이지 :          ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
}

void VictroyScreen()
{
	gotoxy( 0, 0 );
	printf( "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒아군이 이겼다 !!! ▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃                                                            ┃\n");
	printf( "┃      Score :                                               ┃\n");
	printf( "┃                                                            ┃\n");
	printf( "┃                                 ♠                         ┃\n");
	printf( "┃                                ♠♠                        ┃\n");
	printf( "┃                               ♠♠♠                       ┃\n");
	printf( "┃                             ♠♠♠♠♠                     ┃\n");
	printf( "┃                            ♠♠♠♠♠♠                    ┃\n");
	printf( "┃                         ♠♠♠♠♠♠♠♠♠                 ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
}

void FailScreen()
{
	gotoxy( 0, 0 );
	printf( "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒적군이 이겼다 !!! ▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ■    ┃     ■     ■                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ■     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ■                                  ┃\n");
	printf( "┃    ■    ┃     ■     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ■     ┃     ┃                                  ┃\n");
	printf( "┃    ┃    ┃     ┃     ┃     ■    ■    ■   ■   ■     ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒■▒▒▒▒▒▒▒■▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒■▒▒▒▒▒▒▒■▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒■▒▒▒▒▒▒▒■▒▒▒▒▒■▒▒▒▒▒▒▒ ┃\n");
	printf( "┃ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ┃\n");
	printf( "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");	
}

void GameoverScreen()
{
	gotoxy( 0, 0 );
	printf( "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf( "┃     ┃                                         ┃          ┃\n");
	printf( "┃     ■                                         ┃          ┃\n");
	printf( "┃     ┃   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ┃          ┃\n");
	printf( "┃     ┃   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ┃          ┃\n");
	printf( "┃     ┃   ▒▒▒▒▒   Game Over  ▒▒▒▒▒    ┃          ┃\n");
	printf( "┃          ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ■          ┃\n");
	printf( "┃          ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ┃          ┃\n");
	printf( "┃          ▒▒▒▒▒▒ Score      ▒▒▒▒▒    ┃          ┃\n");
	printf( "┃          ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒                ┃\n");
	printf( "┃  #######                                                   ┃\n");
	printf( "┃ #       ##                                                 ┃\n");
	printf( "┃#          ###         ##                                   ┃\n");
	printf( "┃              ###    ##  ######             ####            ┃\n");
	printf( "┃                 ####          ####     ####     #          ┃\n");
	printf( "┃                                   #####          #         ┃\n");
	printf( "┃                                                    #       ┃\n");
	printf( "┃                                                      #     ┃\n");
	printf( "┃                                                        ### ┃\n");
	printf( "┃                                                           #┃\n");
	printf( "┃                                                            ┃\n");
	printf( "┃                                                            ┃\n");
	printf( "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
}

void SoundInit()
{
	// 시스템 오브젝트 생성과 초기화
	FMOD_System_Create(&g_System);
	FMOD_System_Init( g_System, 32, FMOD_INIT_NORMAL, NULL);

	// 반복 사운드
	FMOD_System_CreateSound( g_System, "start.wav", FMOD_DEFAULT | FMOD_LOOP_NORMAL , 0, &g_IntroSound);
	FMOD_System_CreateSound( g_System, "bgsound.wav", FMOD_DEFAULT | FMOD_LOOP_NORMAL, 0, &g_BGSound);
	FMOD_System_CreateSound( g_System, "fail.wav", FMOD_DEFAULT | FMOD_LOOP_NORMAL, 0, &g_FailSound); // 적군이 이겼을 때	

	// 효과 사운드
	FMOD_System_CreateSound( g_System, "ak.wav", FMOD_DEFAULT, 0, &g_EffectSound[0]); // 적군이 죽는 소리
	FMOD_System_CreateSound( g_System, "ubs.wav", FMOD_DEFAULT, 0, &g_EffectSound[1]); // 아군이 죽는 소리
	FMOD_System_CreateSound( g_System, "gun1.wav", FMOD_DEFAULT, 0, &g_EffectSound[2]); // 주인공 총소리	
	FMOD_System_CreateSound( g_System, "success.wav", FMOD_DEFAULT , 0, &g_EffectSound[3]); // 주인공이 이겼을 때	
}


void SoundRelease()
{
	FMOD_Sound_Release(g_IntroSound);
	FMOD_Sound_Release(g_BGSound);
	FMOD_Sound_Release(g_FailSound);

	for( int i = 0 ; i < 4 ; i++ )
		FMOD_Sound_Release(g_EffectSound[i]);	

	FMOD_System_Close( g_System );
	FMOD_System_Release( g_System );
}


void Init()
{	
	int i;

	// 전역 변수 초기화
	g_nFrameCount = 0;		
	g_nEnemyIndex = 0;  // 적 캐릭터의 출현 시작 인덱스 
	g_nDeadEnemy = 0;
	g_nGoal = g_StageInfo[g_nStage - 1].nGoal;

	// 적 캐릭터 초기화 
	for( i = 0 ; i < ENEMY_COUNT ; i++ )
	{	
		g_sEnemy[i].nLife = 0;
		g_sEnemy[i].nY = 1;
		g_sEnemy[i].nX = g_nXPos[ rand() % 4 ]; // 4개의 줄 	
		g_sEnemy[i].nYMoveDist = rand() % g_StageInfo[g_nStage-1].nYDist + 1;// 떨어지는 속도를 조절하기 위한 값, 1은 속도가 0이 되면 않되기에 	 			
	}

	// 주인공 초기화 
	g_sPlay.nIndex = 2;
	g_sPlay.nLifePower = 3;
	g_sPlay.nX = g_nXPos[ g_sPlay.nIndex ]; // 위치를 자유로이 변경을 할 수 있는 구조
	g_sPlay.nY = END_LINE;	
	g_GameState = RUNNING; // 게임 진행 상태로 전환

	// 총알 초기화
	for( i = 0 ; i < BULLET_COUNT ; i++ )
	{
		g_sBullet[i].nLife = 0;
	}	
}

void Update()
{	
	int i, j, nCount = 0;		

	if( g_GameState == RUNNING )
	{			
		//Note: 주인공은 살아 있고  적 캐릭터가 모두 죽어 목표를 이룰수 없는 경우
		if( g_sPlay.nLifePower > 0 && g_nDeadEnemy == ENEMY_COUNT )
		{
			if( g_nGoal > 0 )
			{
				g_GameState = FAILED;
				return ;
			}else{
				g_GameState = SUCCESS;
				return ;
			}
		}		

		// 적 캐릭터 출현을 결정하는 부분 nEnemyIndex이한의 인덱스는 더 이상 살리지 않는다.
		for( i = g_nEnemyIndex; i < ENEMY_COUNT ; i++ )
		{
			if( g_sEnemy[i].nLife == 0 )
			{
				if( g_sEnemy[i].nAppearFrame == g_nFrameCount )
				{
					g_sEnemy[i].nLife = 1; // 출발 
					g_nEnemyIndex++;
				}else{											
					break;
				}
			}	
		}

		// 적 캐릭터 이동  
		for( i = 0 ; i < g_nEnemyIndex ; i++ )
		{
			if( g_sEnemy[i].nLife == 1 )
			{
				
				if( ( g_nFrameCount - g_sEnemy[i].nOldFrame ) > g_sEnemy[i].nYMoveDist )
				{
					g_sEnemy[i].nY++;	// 아래로 내려가는 것이기에 1씩 증가 한다.
					g_sEnemy[i].nOldFrame = g_nFrameCount;		
				}
			}			
		}

		// 총알 이동
		for( i = 0 ; i < BULLET_COUNT ; i++ )
		{
			if( g_sBullet[i].nLife == 1 ) 
			{				
				if( ( g_nFrameCount - g_sBullet[i].nOldFrame ) > g_nBulletVeloc )
				{
					g_sBullet[i].nY--;
					g_sBullet[i].nOldFrame = g_nFrameCount;

					if( g_sBullet[i].nY == 0 )
						g_sBullet[i].nLife = 0;
				}			
			}
		}	

/*-------------------------------------- 충돌 체크 부분 -------------------------------------------------------*/

		// Note: 적 캐릭터와 총알의 충돌 체크 
		for( i = 0 ; i < g_nEnemyIndex ; i++ )
		{
			if( g_sEnemy[i].nLife == 1 )
			{
				for( j = 0 ; j < BULLET_COUNT ; j++ )
				{
					if( g_sBullet[j].nLife == 1 )
					{
						if( (g_sBullet[j].nX == g_sEnemy[i].nX) && g_sEnemy[i].nY >= g_sBullet[j].nY )
						{							
							// 충돌 사운드
							FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_EffectSound[0], 0, &g_pTempChannel);
							g_sBullet[j].nLife = 0;
							g_sEnemy[i].nLife = 0;
							g_nDeadEnemy++;       // Note: 적 캐릭터 죽은 개수
							g_nGoal--;            // Note: 목표 개수
							g_nGrade += 10;		  // Note: 득점
							
							if( g_sPlay.nLifePower > 0 && g_nGoal == 0 )
							{
								g_GameState = SUCCESS;
								return ;
							}	

							break;
						}	
					}
				}
			}
		}

		// 주인공과 적과의 충돌 체크 
		for( i = 0 ; i < g_nEnemyIndex ; i++ )
		{	
			if( g_sEnemy[i].nLife == 1 )
			{
				// 좌표가 같으면  
				if( g_sPlay.nX == g_sEnemy[i].nX && g_sPlay.nY == g_sEnemy[i].nY )
				{						
					g_sEnemy[i].nLife = 0;
					g_sPlay.nLifePower--;
					g_nGoal--;		
					g_nDeadEnemy++;
					FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_EffectSound[0], 0, &g_pTempChannel);
					FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_EffectSound[1], 0, &g_pTempChannel);					

					if( g_sPlay.nLifePower == 0 && g_nGoal > 0 )
					{
						g_GameState = FAILED;
						return ;
					}
					
					if( g_sPlay.nLifePower > 0 && g_nGoal == 0 )
					{
						g_GameState = SUCCESS;
						return ;
					}	

					break; 
				}
			}	
		}  

		// 총알이 Dead Line과 충돌하는 경우를 체크 한다. 총알의 Dead Line은 0 이다. 
		for( i = 0 ; i < BULLET_COUNT ; i++ )
		{
			if( g_sBullet[i].nLife == 1 && g_sBullet[i].nY == 0 ) 
			{
				g_sBullet[i].nLife = 0;
			}
		}	

		// 적캐릭터가 Dead Line에 충돌하는 경우, Dead Line은 END_LINE 21이다
		for( i = 0 ; i < g_nEnemyIndex ; i++ )
		{
			if( g_sEnemy[i].nLife == 1 && g_sEnemy[i].nY == END_LINE )
			{
				g_sEnemy[i].nLife = 0;
				g_sPlay.nLifePower--;
				g_nDeadEnemy++;
				FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_EffectSound[1], 0, &g_pTempChannel);
				
				if( g_sPlay.nLifePower == 0 && g_nGoal > 0 )
				{
					g_GameState = FAILED;
					return ;
				}
					
				if( g_sPlay.nLifePower > 0 && g_nGoal == 0 )
				{
					g_GameState = SUCCESS;
					return ;
				}	
			}
		}
	}
}

void Render()
{
	int i, nYN;	

	system("cls");

	switch( g_GameState )
	{
	case INIT :			
		IntroScreen();
		FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_IntroSound, 0, &g_IntroChannel); 
		_getch();		
		FMOD_Channel_Stop( g_IntroChannel );
		FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_BGSound, 0, &g_BGChannel); 
		Init();		
		break;

	case RUNNING :	
		// 배경 화면 그리기 
		BackScreen();
		// 적 캐릭터 그리기 
		for( i = 0 ; i < ENEMY_COUNT ; i++ )
		{
			if( g_sEnemy[i].nLife )
			{
				gotoxy( g_sEnemy[i].nX, g_sEnemy[i].nY );
				printf( "□" );
			}						
		}

		// 총알 그리기 
		for( i = 0 ; i < BULLET_COUNT ; i++ )
		{
			if( g_sBullet[i].nLife )
			{
				gotoxy( g_sBullet[i].nX, g_sBullet[i].nY );
				printf( "▲" );
			}
		}

		// 주인공 그리기 
		gotoxy( g_sPlay.nX, g_sPlay.nY );
		printf("♠" );

		// 점수와 적 캐릭터수, 생명력 출력 
		gotoxy( 50, 5 );
		printf( "%d", g_nGrade );
		gotoxy( 56, 7 );
		printf( "%d", g_nGoal );
		gotoxy( 54, 11 );
		printf( "%d", g_nStage );

		gotoxy( 51, 9 );
		for( i = 0 ; i < g_sPlay.nLifePower ; i++ )
		{
			printf( "♥");
		}
		break;

	case SUCCESS :
		// 아군의 승리 
		FMOD_Channel_Stop( g_BGChannel );
		FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_EffectSound[3], 0, &g_pTempChannel);

		VictroyScreen();
		gotoxy( 18, 8 ); 
		printf( "%d", g_nGrade );
		gotoxy( 19, 18 ); 
		fflush( stdin );
		printf( "계속 하시겠습니까? <y/n>  " );

		while( 1 )
		{
			nYN = _getch(); 
			fflush( stdin );
			if( nYN == 'y' || nYN == 'Y' )
			{
				FMOD_Channel_Stop( g_pTempChannel );
				g_GameState = INIT;
				g_nStage++;				// 아군이 승리할 때만  스테이지를 올린다.
				Init();
				FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_BGSound, 0, &g_BGChannel);
				break;
			}

			if( nYN == 'n' || nYN == 'N')
			{
				g_GameState = RESULT;
				break;
			}
		}						
		break;	

	case FAILED : // 적군의 승리 
		FMOD_Channel_Stop( g_BGChannel );
		FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_FailSound, 0, &g_FailChannel);

		FailScreen();		
		gotoxy( 19, 18 ); 
		fflush( stdin );
		printf( "계속 하시겠습니까? <y/n>  " );

		while( 1 )
		{
			nYN = _getch(); 
			fflush( stdin );
			if( nYN == 'y' || nYN == 'Y' )
			{
				FMOD_Channel_Stop( g_FailChannel );
				g_GameState = INIT;	
				Init();
				FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_BGSound, 0, &g_BGChannel);
				break;
			}

			if( nYN == 'n' || nYN == 'N')
			{
				FMOD_Channel_Stop( g_FailChannel );
				g_GameState = RESULT;
				break;
			}
		}				
		break;

	case RESULT : 
		// 게임 종료  
		GameoverScreen();
		gotoxy( 31, 8 );
		printf( "%d", g_nGrade );
		gotoxy( 0, 23 );		
		fflush( stdin );
		_getch();
		g_GameState = END;		
		break;
	}
}

void Release()
{
	// Note: 할당한 메모리가 있으면 해제 	
	SoundRelease();
}

int _tmain(int argc, _TCHAR* argv[])
{
	int nKey, i;	
	clock_t sOldTime, sCurTime;

	sOldTime = clock();
	
	SoundInit();	

	while( 1 )
	{
		if( g_GameState == END )
			break;

		if( _kbhit() )
		{
			nKey = _getch();

			switch( nKey )
			{
			case 'j' :
				g_sPlay.nIndex--;
				if( g_sPlay.nIndex < 0 )
					g_sPlay.nIndex = 0;												

				g_sPlay.nX = g_nXPos[ g_sPlay.nIndex ];
				break;

			case 'k' :
				for( i = 0 ; i < BULLET_COUNT ; i++ )
				{
					if( g_sBullet[i].nLife == 0 )
					{
						g_sBullet[i].nLife = 1;
						g_sBullet[i].nOldFrame = g_nFrameCount;
						g_sBullet[i].nY = 20;
						g_sBullet[i].nX = g_sPlay.nX;
						FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_EffectSound[2], 0, &g_pTempChannel);
						break;
					}
				}
				break;

			case 'l' :	
				g_sPlay.nIndex++;
				if( g_sPlay.nIndex > 3 )			
					g_sPlay.nIndex = 3;							

				g_sPlay.nX = g_nXPos[ g_sPlay.nIndex ];
				break;
			}		
		}

		Update();
		Render();	
		FMOD_System_Update( g_System );

		while( 1 )
		{
			sCurTime = clock();

			if( sCurTime - sOldTime > 33 )
			{
				sOldTime = sCurTime;
				break;
			}
		}

		g_nFrameCount++;	
	}
	
	Release();

	return 0;
}